FROM phusion/baseimage:focal-1.0.0

ARG ubuntu_scr="ch4ng3m3"
#ARG ubuntu_scr
ARG host_dir="/opt/serverlab-testflinger"
#ARG host_dir

ENV DEBIAN_FRONTEND noninteractive
ENV HOME /root
ENV LC_ALL C.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
ENV PATH /data/testflinger/agent:/data/testflinger/device-connectors:$PATH
ENV HOSTDIR ${host_dir}

RUN echo "RUNNING tf-agent dockerfile"
RUN echo "ubuntu_scr: ${ubuntu_scr}"
RUN echo "host_dir: ${host_dir}"

# add maas-cli PPA
RUN apt-add-repository ppa:maas/2.9 -y
# add docker
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
RUN add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"

# install deps & cleanup
RUN apt-get update \
  && apt-cache policy docker-ce \
  && apt-get install -y \
    --no-install-recommends \
    ca-certificates \
    gpg \
    lsb-release \
    docker-ce \
    bash \
    bash-completion \
    sudo \
    openssh-client \
    build-essential \
    net-tools \
    iputils-ping \
    iproute2 \
    curl \
    git \
    wget \
    python3 \
    python3-dev \
    python3-pip \
    python3-virtualenv \
    python3-requests \
    python3-click \
    maas-cli
    # uuid-dev \
    # zlib1g-dev \
    # libjson-c-dev \
    # gcc \
    # make \
    # automake \
    # autotools-dev \
    # autoconf \
    # pkg-config

# clean up APT
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# link python3 bin
RUN ln -s /usr/bin/python3 /usr/bin/python

RUN pip3 install --ignore-installed requests_oauthlib psutil setproctitle "paho-mqtt<2.0.0" docker urllib3 get_docker_secret hvac

# add ubuntu user
RUN useradd -ms /bin/bash ubuntu \
  && usermod -aG docker ubuntu

# add to sudoers
RUN echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# add SSH access
RUN rm -f /etc/service/sshd/down \
  && /etc/my_init.d/00_regen_ssh_host_keys.sh > /dev/null 2>&1

# prepare ssh key ops
COPY ./ssh/authorized_keys /tmp/authorized_keys
COPY ./code/export_ssh_pubkey.py /opt/export_ssh_pubkey.py

# gen ssh keys, update pubkey, import auth_keys
USER ubuntu
# generate ssh key and insert real hostname into pubkey
RUN ssh-keygen -t rsa -N '' -f /home/ubuntu/.ssh/id_rsa \
  && sed -i 's|@buildkitsandbox|@testflinger-agent|gI' /home/ubuntu/.ssh/id_rsa.pub
# import auth_keys
RUN cat /tmp/authorized_keys >> /home/ubuntu/.ssh/authorized_keys

# USER testflinger
# RUN ssh-keygen -t rsa -N '' -f /home/testflinger/.ssh/id_rsa \
#   && sed -i 's|@buildkitsandbox|@testflinger-agent|gI' /home/testflinger/.ssh/id_rsa.pub
# RUN cat /tmp/authorized_keys >> /home/testflinger/.ssh/authorized_keys

# root must be last
USER root
RUN ssh-keygen -t rsa -N '' -f /root/.ssh/id_rsa \
  && sed -i 's|@buildkitsandbox|@testflinger-agent|gI' /root/.ssh/id_rsa.pub
RUN cat /tmp/authorized_keys >> /root/.ssh/authorized_keys \
  && rm -f /tmp/authorized_keys

# facilitate logging
RUN mkdir -p /var/log/testflinger \
  && chmod 755 /var/log/testflinger

# facilitate sut-agent logging
RUN mkdir /var/log/sut-agent \
  && chown ubuntu:ubuntu /var/log/sut-agent

# clone testflinger source in volume dir
WORKDIR /data/testflinger
RUN git init\
   && git remote add origin https://github.com/canonical/testflinger.git \
   && git fetch origin \
   #&& git checkout -b main 525468018
   && git checkout -b main --track origin/main

# copy tf-agent config files
COPY ./code/testflinger-agent.conf /data/testflinger/agent

# run tf-agent setup
WORKDIR /data/testflinger/agent
RUN echo && ls -l .. && echo
RUN echo && ls -l && echo
RUN echo && echo "Running testflinger-agent setup:" \ 
  && echo "Updating pip from $(pip3 --version)" \
  && pip3 install -U pip \
  && hash -r \
  && echo "New pip version: $(pip3 --version)" \
  && echo "Attempting build/install of testflinger-agent" \
  && pip install -I .
  #&& python3 setup.py install

#run snappy-agent setup
WORKDIR /data/testflinger/device-connectors
RUN echo && echo "Running device-connectors setup:" \
  && pip install -I .
  #&& python3 setup.py install --verbose

# adjust perms on src files
RUN chown -R ubuntu:ubuntu /data/testflinger/agent \
  && chmod 775 /data/testflinger/agent \
  && chown -R ubuntu:ubuntu /data/testflinger/device-connectors \
  && chmod 775 /data/testflinger/device-connectors

# # netdata
# RUN git clone https://github.com/netdata/netdata.git --depth=100 --recursive
# RUN ./netdata/netdata-installer.sh --dont-start-it --disable-telemetry
# RUN chown -R root:root /var/log/netdata

# copy entrypoint file
COPY ./code/tf-entrypoint.sh /opt/tf-entrypoint.sh
RUN chmod 755 /opt/tf-entrypoint.sh

# copy agent service files
COPY ./code/01_run_sut_agents.sh /etc/my_init.d/01_run_sut_agents.sh
RUN chmod 755 /etc/my_init.d/*
# COPY code/04_netdata.sh /etc/my_init.d/02_netdata.sh

# copy cntnr rscrcs
RUN mkdir /data/docker
COPY ./code/init_agent_cntnrs.py /opt/init_agent_cntnrs.py
COPY ./tf-agent_cntnr /data/docker/Dockerfile
COPY ./ssh/authorized_keys /data/docker/authorized_keys

# docker auth
RUN docker login -u dreadpiratejeff -p dckr_pat_trCqJ9o28-RULzrQRhvi9NiuhBo
#RUN docker login -u alanec -p 32aafe13-c040-4a93-a0e2-848f5468b4c1

# set user passwords (temp pw)
RUN echo "ubuntu:${ubuntu_scr}" | chpasswd
# RUN echo "testflinger:${testflinger_scr}" | chpasswd

# set user passwords (secure method)
# RUN --mount=type=secret,id=tf_secret,required=true chpasswd < /run/secrets/tf_secret
